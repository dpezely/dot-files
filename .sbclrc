;;; -*-Lisp-*-
;;; dot.lisp - save in /home/www/ then sym-link as ~/.sbclrc and ~/ccl-init.lisp
;;; for SBCL character encoding: export LANG=en_US.UTF-8

(in-package :cl-user)

(require 'asdf)

;; Probably don't need this kruft since we have Quicklisp...
;; See also .asdf-install
(let ((site-libraries
       ;;#+darwin (merge-pathnames "lisp/")
       #+darwin #P"/usr/local/lisp/"
       #+(or freebsd linux) #P"/home/www/lib/"))

  (pushnew site-libraries asdf:*central-registry*)

  ;; ASDF-install is an add-on for everything other than SBCL:
  #+ccl (pushnew #P"/usr/local/ccl/tools/asdf-install/" asdf:*central-registry*)

  (dolist (path (list ;;add your personal paths in this list ...
		 (merge-pathnames "systems/" site-libraries)))
    (pushnew (merge-pathnames path site-libraries) asdf:*central-registry* :test #'equal))

  (defvar *site-local-asdf-install-locations*
    (list (merge-pathnames "source/"  site-libraries)
	  (merge-pathnames "systems/" site-libraries)
	  "local site install")
    "Configures ASDF-INSTALL to use same paths that ASDF will search.
Call this first: (require 'asdf-install)
Then: (pushnew *site-local-asdf-install-locations* asdf-install:*locations* :test 'equal)")
  (export '*site-local-asdf-install-locations*))


;;; Yanked from http://www.cliki.net/asdf based upon
;;; http://www.sbcl.org/manual/Automatic-Recompilation-of-Stale-Fasls.html
;;; If the fasl was stale, try to recompile and load (once). Since only SBCL
;;; has a separate condition for bogus fasls we retry on any old error
;;; on other lisps. Actually, Allegro has a similar condition, but it's 
;;; unexported.  Works nicely for the ACL7 upgrade, though.
;;; CMUCL has an invalid-fasl condition as of 19c.
(defmethod asdf:perform :around ((o asdf:load-op) (c asdf:cl-source-file))
  (handler-case (call-next-method o c)
    (#+sbcl sb-ext:invalid-fasl 
     #+allegro excl::file-incompatible-fasl-error
     #+lispworks conditions:fasl-error
     #+cmu ext:invalid-fasl
     #-(or sbcl allegro lispworks cmu) error ()
     (asdf:perform (make-instance 'asdf:compile-op) c)
     (call-next-method))))


;;; added originally by ql:add-to-init-file:
#-quicklisp
(let ((quicklisp-init #P"/usr/local/lisp/quicklisp/setup.lisp"))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))

(declaim (optimize (debug 3) (safety 2) (speed 1) (space 0)))
