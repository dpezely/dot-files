;;; -*-Lisp-*-
;;; dot.lisp - sym-link as ~/.sbclrc and ~/ccl-init.lisp
;;; for SBCL character encoding: export LANG=en_US.UTF-8

(in-package :cl-user)

(require 'asdf)

;; In SBCL, tail-call optimization goes away when debug > 2
;; http://sbcl.org/manual/index.html#Debug-Tail-Recursion
(declaim (optimize (safety 3) (debug 2) (speed 1) (space 0)))

;;; Yanked from http://www.cliki.net/asdf based upon
;;; http://www.sbcl.org/manual/Automatic-Recompilation-of-Stale-Fasls.html
;;; If the fasl was stale, try to recompile and load (once). Since only SBCL
;;; has a separate condition for bogus fasls we retry on any old error
;;; on other lisps. Actually, Allegro has a similar condition, but it's 
;;; unexported.  Works nicely for the ACL7 upgrade, though.
;;; CMUCL has an invalid-fasl condition as of 19c.
(defmethod asdf:perform :around ((o asdf:load-op) (c asdf:cl-source-file))
  (handler-case (call-next-method o c)
    (#+sbcl sb-ext:invalid-fasl 
     #+allegro excl::file-incompatible-fasl-error
     #+lispworks conditions:fasl-error
     #+cmu ext:invalid-fasl
     #-(or sbcl allegro lispworks cmu) error ()
     (asdf:perform (make-instance 'asdf:compile-op) c)
     (call-next-method))))

;; FIXME: ASDF Manual says to push pathnames as strings with trailing slash
;; https://www.common-lisp.net/project/asdf/asdf.html#Configuring-ASDF

;; Get ~/lisp/ if it exists:
(let ((dir (probe-file (merge-pathnames "lisp" (user-homedir-pathname)))))
  (when dir
    (push dir asdf:*central-registry*)))

;; Get ./src/ if it exists, such as when working a project in its own subdirectory:
(let ((dir (probe-file (merge-pathnames "src"))))
  (when dir
    (push dir asdf:*central-registry*)))

;; Push current working directory last, so it's accessed first:
(push *default-pathname-defaults* asdf:*central-registry*)

;;; added originally to bottom of file by ql:add-to-init-file:
#-quicklisp
(let ((quicklisp-init (merge-pathnames #P"quicklisp/setup.lisp"
				       (user-homedir-pathname))))
  (when (probe-file quicklisp-init)
    (load quicklisp-init)))
